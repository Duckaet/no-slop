#!/usr/bin/env node

/**
 * Development helper script for AI Content Blocker
 * Provides utilities for testing and development
 */

const fs = require('fs');
const path = require('path');

// Test patterns against sample content
const testPatterns = () => {
  console.log('🧪 Testing AI Detection Patterns...\n');
  
  const patterns = [
    /as an ai/i,
    /i am an ai/i,
    /chatgpt/i,
    /generated by ai/i,
    /midjourney/i,
    /dall-?e/i
  ];

  const testCases = [
    { text: 'As an AI language model, I cannot help with that', expected: true },
    { text: 'This image was generated by ChatGPT', expected: true },
    { text: 'Just had a great coffee this morning!', expected: false },
    { text: 'Made with Midjourney AI art generator', expected: true },
    { text: 'Beautiful sunset photo from my vacation', expected: false },
    { text: 'I am an AI assistant here to help', expected: true }
  ];

  testCases.forEach((testCase, index) => {
    const hasAI = patterns.some(pattern => pattern.test(testCase.text));
    const status = hasAI === testCase.expected ? '✅ PASS' : '❌ FAIL';
    
    console.log(`Test ${index + 1}: ${status}`);
    console.log(`Text: "${testCase.text}"`);
    console.log(`Expected: ${testCase.expected}, Got: ${hasAI}\n`);
  });
};

// Validate manifest.json
const validateManifest = () => {
  console.log('📋 Validating manifest.json...\n');
  
  try {
    const manifestPath = path.join(__dirname, 'manifest.json');
    const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
    
    const requiredFields = [
      'manifest_version',
      'name',
      'version',
      'description',
      'permissions',
      'host_permissions',
      'background',
      'content_scripts',
      'action'
    ];

    const missingFields = requiredFields.filter(field => !manifest[field]);
    
    if (missingFields.length === 0) {
      console.log('✅ Manifest is valid');
      console.log(`📦 Extension: ${manifest.name} v${manifest.version}`);
      console.log(`🔧 Manifest Version: ${manifest.manifest_version}`);
    } else {
      console.log('❌ Manifest validation failed');
      console.log('Missing fields:', missingFields);
    }
  } catch (error) {
    console.log('❌ Error reading manifest.json:', error.message);
  }
  
  console.log('');
};

// Check for required files
const checkFiles = () => {
  console.log('📁 Checking required files...\n');
  
  const requiredFiles = [
    'manifest.json',
    'background.js',
    'content.js',
    'content.css',
    'popup.html',
    'popup.js',
    'popup.css',
    'options.html',
    'options.js',
    'options.css'
  ];

  const optionalFiles = [
    'icons/icon-16.png',
    'icons/icon-32.png',
    'icons/icon-48.png',
    'icons/icon-128.png'
  ];

  requiredFiles.forEach(file => {
    const exists = fs.existsSync(path.join(__dirname, file));
    const status = exists ? '✅' : '❌';
    console.log(`${status} ${file}`);
  });

  console.log('\nOptional files:');
  optionalFiles.forEach(file => {
    const exists = fs.existsSync(path.join(__dirname, file));
    const status = exists ? '✅' : '⚠️ ';
    console.log(`${status} ${file}`);
  });
  
  console.log('');
};

// Generate installation instructions
const generateInstructions = () => {
  console.log('📖 Installation Instructions\n');
  console.log('1. Open Chrome and go to chrome://extensions/');
  console.log('2. Enable "Developer mode" in the top-right corner');
  console.log('3. Click "Load unpacked" and select this directory');
  console.log('4. Add extension icons (see icons/README.md)');
  console.log('5. Pin the extension to your toolbar');
  console.log('6. Visit twitter.com or x.com to test\n');
};

// Run development checks
const runChecks = () => {
  console.log('🚀 AI Content Blocker - Development Checks\n');
  console.log('='.repeat(50) + '\n');
  
  checkFiles();
  validateManifest();
  testPatterns();
  generateInstructions();
  
  console.log('🎉 Development checks complete!');
  console.log('💡 Run "npm test" for unit tests');
  console.log('💡 Run "npm run lint" for code quality checks');
};

// Handle command line arguments
const args = process.argv.slice(2);

if (args.includes('--test-patterns')) {
  testPatterns();
} else if (args.includes('--validate')) {
  validateManifest();
} else if (args.includes('--check-files')) {
  checkFiles();
} else if (args.includes('--instructions')) {
  generateInstructions();
} else {
  runChecks();
}
